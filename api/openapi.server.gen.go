// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check the health of the server
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get a list of murder mysteries
	// (GET /murder_mysteries)
	GetMurderMysteries(c *gin.Context, params GetMurderMysteriesParams)
	// Get details of a specific murder mystery
	// (GET /murder_mysteries/{id})
	GetMurderMysteriesId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMurderMysteries operation middleware
func (siw *ServerInterfaceWrapper) GetMurderMysteries(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMurderMysteriesParams

	// ------------- Optional query parameter "yearMonth" -------------

	err = runtime.BindQueryParameter("form", true, false, "yearMonth", c.Request.URL.Query(), &params.YearMonth)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter yearMonth: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMurderMysteries(c, params)
}

// GetMurderMysteriesId operation middleware
func (siw *ServerInterfaceWrapper) GetMurderMysteriesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMurderMysteriesId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/murder_mysteries", wrapper.GetMurderMysteries)
	router.GET(options.BaseURL+"/murder_mysteries/:id", wrapper.GetMurderMysteriesId)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse struct {
	// Message The message of the server
	Message string `json:"message"`
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMurderMysteriesRequestObject struct {
	Params GetMurderMysteriesParams
}

type GetMurderMysteriesResponseObject interface {
	VisitGetMurderMysteriesResponse(w http.ResponseWriter) error
}

type GetMurderMysteries200JSONResponse []MurderMystery

func (response GetMurderMysteries200JSONResponse) VisitGetMurderMysteriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMurderMysteries400Response struct {
}

func (response GetMurderMysteries400Response) VisitGetMurderMysteriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetMurderMysteries500Response struct {
}

func (response GetMurderMysteries500Response) VisitGetMurderMysteriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetMurderMysteriesIdRequestObject struct {
	Id int `json:"id"`
}

type GetMurderMysteriesIdResponseObject interface {
	VisitGetMurderMysteriesIdResponse(w http.ResponseWriter) error
}

type GetMurderMysteriesId200JSONResponse MurderMysteryDetail

func (response GetMurderMysteriesId200JSONResponse) VisitGetMurderMysteriesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMurderMysteriesId400Response struct {
}

func (response GetMurderMysteriesId400Response) VisitGetMurderMysteriesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetMurderMysteriesId404Response struct {
}

func (response GetMurderMysteriesId404Response) VisitGetMurderMysteriesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetMurderMysteriesId500Response struct {
}

func (response GetMurderMysteriesId500Response) VisitGetMurderMysteriesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Check the health of the server
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get a list of murder mysteries
	// (GET /murder_mysteries)
	GetMurderMysteries(ctx context.Context, request GetMurderMysteriesRequestObject) (GetMurderMysteriesResponseObject, error)
	// Get details of a specific murder mystery
	// (GET /murder_mysteries/{id})
	GetMurderMysteriesId(ctx context.Context, request GetMurderMysteriesIdRequestObject) (GetMurderMysteriesIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *gin.Context) {
	var request GetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMurderMysteries operation middleware
func (sh *strictHandler) GetMurderMysteries(ctx *gin.Context, params GetMurderMysteriesParams) {
	var request GetMurderMysteriesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMurderMysteries(ctx, request.(GetMurderMysteriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMurderMysteries")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMurderMysteriesResponseObject); ok {
		if err := validResponse.VisitGetMurderMysteriesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMurderMysteriesId operation middleware
func (sh *strictHandler) GetMurderMysteriesId(ctx *gin.Context, id int) {
	var request GetMurderMysteriesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMurderMysteriesId(ctx, request.(GetMurderMysteriesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMurderMysteriesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMurderMysteriesIdResponseObject); ok {
		if err := validResponse.VisitGetMurderMysteriesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
